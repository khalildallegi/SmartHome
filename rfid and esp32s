(sda 22, sck,18 miso 19,rst 5)
#include <SPI.h>
#include <MFRC522.h>
#include <EEPROM.h>


#define RST_PIN         5          // Configurable, see typical pin layout above
#define SS_PIN          22        // Configurable, see typical pin layout above

MFRC522 mfrc522(SS_PIN, RST_PIN);  // Create MFRC522 instance
byte savedUIDs[2][4] = {
    {0x29, 0xAE, 0x24, 0xD9},  // UID 1: 29 AE 24 D9
    {0x96, 0x54, 0xDB, 0x2B}   // UID 2: 96 54 DB 2B
};

int savedUIDCount = 2;     
void setup() {
	Serial.begin(9600);		// Initialize serial communications with the PC
		// Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)
	SPI.begin();			// Init SPI bus
	mfrc522.PCD_Init();		// Init MFRC522
	delay(4);				// Optional delay. Some board do need more time after init to be ready, see Readme
	mfrc522.PCD_DumpVersionToSerial();	// Show details of PCD - MFRC522 Card Reader details
	Serial.println(F("Scan PICC to see UID, SAK, type, and data blocks..."));
    Serial.begin(9600);
  Serial.println("Testing Serial Output");
      saveHardcodedUIDsToEEPROM();
}

void loop() {
   Serial.println("Hello, world!");
  delay(1000);
	// Reset the loop if no new card present on the sensor/reader. This saves the entire process when idle.
	if ( ! mfrc522.PICC_IsNewCardPresent()) {
		return;
	}

	// Select one of the cards
	if ( ! mfrc522.PICC_ReadCardSerial()) {
		return;
	}
    if (isUIDSaved(mfrc522.uid.uidByte, mfrc522.uid.size)) {
        Serial.print("Card UID matches a saved UID: ");
        printUID(mfrc522.uid.uidByte, mfrc522.uid.size);
    } else {
        Serial.println("Card UID does not match saved UIDs.");
    }

    mfrc522.PICC_HaltA(); // Halt PICC

}
bool isUIDSaved(byte *uid, byte uidSize) {
    for (int i = 0; i < savedUIDCount; i++) {
        bool match = true;
        for (byte j = 0; j < uidSize; j++) {
            if (savedUIDs[i][j] != uid[j]) {
                match = false;
                break;
            }
        }
        if (match) return true;  // UID matches
    }
    return false;
}

// Function to print a UID in hex format
void printUID(byte *uid, byte uidSize) {
    for (byte i = 0; i < uidSize; i++) {
        Serial.print(uid[i] < 0x10 ? " 0" : " ");
        Serial.print(uid[i], HEX);
    }
    Serial.println();
}

// Function to save the hardcoded UIDs to EEPROM
void saveHardcodedUIDsToEEPROM() {
    for (int i = 0; i < savedUIDCount; i++) {
        int eepromAddress = i * 4;  // Each UID is 4 bytes long
        for (int j = 0; j < 4; j++) {
            EEPROM.write(eepromAddress + j, savedUIDs[i][j]);
        }
    }
    Serial.println("Hardcoded UIDs saved to EEPROM.");
}

// Function to load UIDs from EEPROM
void loadUIDsFromEEPROM() {
    for (int i = 0; i < savedUIDCount; i++) {
        int eepromAddress = i * 4; // Each UID is 4 bytes long
        for (int j = 0; j < 4; j++) {
            savedUIDs[i][j] = EEPROM.read(eepromAddress + j);
        }
    }
}
