#include <Keypad.h>
#include <LiquidCrystal_I2C.h>
#include <SPI.h>
#include <MFRC522.h>
#include <EEPROM.h>
#define ROWS  4
#define COLS  4
#define Vanpin 2
#define mainpin 4
#define buzzerpin 15 
#define RST_PIN 23  // Reset pin
#define SS_PIN 12   // Slave Select pin
MFRC522 mfrc522(SS_PIN, RST_PIN); // Create MFRC522 instance
byte savedUIDs[2][4] = {
    {0x29, 0xAE, 0x24, 0xD9},  // UID 1
    {0x96, 0x54, 0xDB, 0x2B}   // UID 2
};
int savedUIDCount = 2;
const unsigned long onTime = 30000; 
const unsigned long offTime = 300000;
int lcdColumns = 16;
int lcdRows = 2;
LiquidCrystal_I2C lcd(0x27, lcdColumns, lcdRows);
char keyMap[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};
uint8_t rowPins[ROWS] = {14, 27, 26, 25}; // GIOP14, GIOP27, GIOP26, GIOP25
uint8_t colPins[COLS] = {33, 32, 18, 19}; // GIOP33, GIOP32, GIOP18, GIOP19
Keypad keypad = Keypad(makeKeymap(keyMap), rowPins, colPins, ROWS, COLS);
String correctPassword = "836"; // The correct password
String enteredPassword = "";    // To store user input
void controlFan(int Vanpin, unsigned long onDuration, unsigned long offDuration) {
  static unsigned long previousMillis = 0; // Store the last time the fan state changed
  static bool fanState = false;            // Current state of the fan (ON/OFF)
  unsigned long currentMillis = millis(); // Current time

  if (fanState && (currentMillis - previousMillis >= onDuration)) {
    // Turn OFF the fan after ON duration
    previousMillis = currentMillis;
    fanState = false;
    digitalWrite(Vanpin, LOW);
  } else if (!fanState && (currentMillis - previousMillis >= offDuration)) {
    // Turn ON the fan after OFF duration
    previousMillis = currentMillis;
    fanState = true;
    digitalWrite(Vanpin, HIGH);
  }
}

bool isUIDSaved(byte *uid, byte uidSize) {
    for (int i = 0; i < savedUIDCount; i++) {
        bool match = true;
        for (byte j = 0; j < uidSize; j++) {
            if (savedUIDs[i][j] != uid[j]) {
                match = false;
                break;
            }
        }
        if (match) return true;  // UID matches
    }
    return false;
}

// Print UID in hexadecimal format
void printUID(byte *uid, byte uidSize) {
    for (byte i = 0; i < uidSize; i++) {
        Serial.print(uid[i] < 0x10 ? " 0" : " ");
        Serial.print(uid[i], HEX);
    }
    Serial.println();
}

// Save predefined UIDs to EEPROM
void saveHardcodedUIDsToEEPROM() {
    for (int i = 0; i < savedUIDCount; i++) {
        int eepromAddress = i * 4;  // Each UID is 4 bytes
        for (int j = 0; j < 4; j++) {
            EEPROM.write(eepromAddress + j, savedUIDs[i][j]);
        }
    }
    EEPROM.commit();  // Commit changes to EEPROM
    Serial.println("Hardcoded UIDs saved to EEPROM.");
}

// Load UIDs from EEPROM
void loadUIDsFromEEPROM() {
    for (int i = 0; i < savedUIDCount; i++) {
        int eepromAddress = i * 4;  // Each UID is 4 bytes
        for (int j = 0; j < 4; j++) {
            savedUIDs[i][j] = EEPROM.read(eepromAddress + j);
        }
    }
}


void setup() {
  SPI.begin(13, 22,21, 12); 
  mfrc522.PCD_Init();
   delay(4);
   EEPROM.begin(512);
   saveHardcodedUIDsToEEPROM(); 
  pinMode(Vanpin,OUTPUT);
  pinMode(mainpin,OUTPUT);
  pinMode(buzzerpin,OUTPUT);

  Serial.begin(115200);
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("Enter Password:");
}

void loop() {
  int t=0;
  if (!mfrc522.PICC_IsNewCardPresent()) return; // Check for new card
    if (!mfrc522.PICC_ReadCardSerial()) return; 
    if (isUIDSaved(mfrc522.uid.uidByte, mfrc522.uid.size)) {
        t=1;
        printUID(mfrc522.uid.uidByte, mfrc522.uid.size);
    } else {
       t=0;
    }

    mfrc522.PICC_HaltA(); // Halt PICC
  digitalWrite(mainpin, 0);
  controlFan(Vanpin, onTime, offTime);
  char key = keypad.getKey(); // Get the pressed key

  if (key) { // If a key is pressed
    if (key == 'D') { // Validate the password
      lcd.clear();
      if (enteredPassword == correctPassword ||t==1) {
        lcd.setCursor(0, 0);
        lcd.print("Access Granted!");
        digitalWrite(mainpin,0);
        delay(1000);
             digirtalWrite(buzzerpin,1);
      delay(500);
      digirtalWrite(buzzerpin,0);
      delay(500);
            digirtalWrite(buzzerpin,1);
      delay(500);
      digirtalWrite(buzzerpin,1);
        
        delay(2000);
        lcd.clear();
        lcd.print("Waiting 30 sec...");
        t=0;
        delay(30000); // Simulate the 30-second delay
        lcd.clear();
        digitalWrite(mainpin,1);
        digirtalWrite(buzzerpin,1);
      delay(500);
      digirtalWrite(buzzerpin,0);  
        lcd.print("Enter Password:");
        enteredPassword = ""; // Reset password
      } else {
        lcd.setCursor(0, 0);
        lcd.print("Access Denied!");
        delay(2000);
        lcd.clear();
        lcd.print("Enter Password:");
        enteredPassword = ""; // Clear entered password
      }
    } else if (key == 'C') { // Clear password
      enteredPassword = "";
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Password Cleared");
      delay(2000);
      lcd.clear();
      lcd.print("Enter Password:");
    } else if (key == 'A') { // Delete last character
      if (enteredPassword.length() > 0) {
        enteredPassword.remove(enteredPassword.length() - 1);
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Deleted: ");
        lcd.print(enteredPassword);
        delay(2000);
        lcd.clear();
        lcd.print("Enter Password:");
      }
    } else { // Append the key to the entered password
      if (enteredPassword.length() < 16) { // Limit the length to prevent overflow
        enteredPassword += key;
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Entered: ");
        lcd.print(enteredPassword);
      } else {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Max Length Reached");
        delay(2000);
        lcd.clear();
        lcd.print("Enter Password:");
      }
    }
  }
}
