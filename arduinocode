#include <Arduino.h>
#include <ESP8266WiFi.h>      // Uncomment this line if you are using esp8266 and comment the line above
#include <Firebase_ESP_Client.h>

// Provide the token generation process info.
#include "addons/TokenHelper.h"
// Provide the RTDB payload printing info and other helper functions.
#include "addons/RTDBHelper.h"

// Insert your network credentials
#define WIFI_SSID "Flybox_9A72"
#define WIFI_PASSWORD "LMtRCqFkRCxb"

// Insert Firebase project API Key
#define API_KEY "AIzaSyBSmsRSzyNy2l58LMspjdJDDafy1nQK320"

// Insert RTDB URL
#define DATABASE_URL "https://esp82realtime-default-rtdb.firebaseio.com/"

// Define Firebase Data object
FirebaseData fbdo;

FirebaseAuth auth;
FirebaseConfig config;

unsigned long sendDataPrevMillis = 0;
int count = 0;
bool signupOK = false;  // Since we are doing an anonymous sign-in

// LED pin
const int ledPin = 16;

void setup(){
  Serial.begin(115200);
  pinMode(ledPin, OUTPUT); // Set LED pin as output
  digitalWrite(ledPin, LOW); // Ensure LED is off initially
  
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED){
    Serial.print(".");
    delay(300);
  }
  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());
  Serial.println();

  /* Assign the API key (required) */
  config.api_key = API_KEY;

  /* Assign the RTDB URL (required) */
  config.database_url = DATABASE_URL;

  /* Sign up */
  if (Firebase.signUp(&config, &auth, "", "")){
    Serial.println("ok");
    signupOK = true;
  }
  else{
    Serial.printf("%s\n", config.signer.signupError.message.c_str());
  }

  /* Assign the callback function for the long running token generation task */
  config.token_status_callback = tokenStatusCallback; // See addons/TokenHelper.h
  
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);
}

void loop(){
  if (Firebase.ready() && signupOK){
    // Check for new LED status from Firebase
    if (Firebase.RTDB.getInt(&fbdo, "led/status")){
      int ledStatus = fbdo.intData();
      Serial.print("LED Status: ");
      Serial.println(ledStatus);
      if (ledStatus == 1){
        digitalWrite(ledPin, HIGH); // Turn LED on
      } else {
        digitalWrite(ledPin, LOW); // Turn LED off
      }
    } else {
      Serial.println("Failed to get LED status");
      Serial.println("REASON: " + fbdo.errorReason());
    }

  }
}
